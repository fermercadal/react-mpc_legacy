{"version":3,"sources":["Sounds/kick-1.mp3","Sounds/kick-2.mp3","Sounds/snare-1.mp3","Sounds/snare-2.mp3","Sounds/hihat-close.mp3","Sounds/hihat-open.mp3","Sounds/hit-1.mp3","Sounds/hit-2.mp3","Sounds/trumpet.mp3","Components/Pad.js","Components/Display.js","App.js","serviceWorker.js","index.js"],"names":["Pad","id","this","props","padKey","className","onClick","playKey","src","padSound","Component","value","App","state","playedSound","padsKit","padName","hit1","hit2","trumpet","snare1","snare2","oh","kick1","kick2","ch","bind","pressKey","updateDisplay","document","addEventListener","e","map","key","concat","toLowerCase","includes","toUpperCase","button","getElementById","audio","currentTime","play","classList","add","setTimeout","remove","pressedKey","filter","setState","i","Display","href","target","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7e42555b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/kick-1.b3cb91bd.mp3\";","export default __webpack_public_path__ + \"static/media/kick-2.5737acf1.mp3\";","export default __webpack_public_path__ + \"static/media/snare-1.89dba158.mp3\";","export default __webpack_public_path__ + \"static/media/snare-2.88287c7f.mp3\";","export default __webpack_public_path__ + \"static/media/hihat-close.0de29f5b.mp3\";","export default __webpack_public_path__ + \"static/media/hihat-open.2c199113.mp3\";","export default __webpack_public_path__ + \"static/media/hit-1.22a79c3d.mp3\";","export default __webpack_public_path__ + \"static/media/hit-2.eb18af65.mp3\";","export default __webpack_public_path__ + \"static/media/trumpet.4e01a247.mp3\";","import React, { Component } from 'react';\n\nclass Pad extends Component {\n  render() {\n    return (\n      <button id={ 'drum-pad-' + this.props.padKey } className=\"drum-pad\" onClick={this.props.playKey}>\n        <span>{ this.props.padKey }</span>\n        <audio id={ this.props.padKey } className='clip' src={ this.props.padSound }></audio>\n      </button>\n      \n    );\n  }\n}\n\nexport default Pad;","import React, { Component } from 'react';\n\nclass Pad extends Component {\n  render() {\n    return (\n      <div id=\"display\" className=\"display\">\n        {this.props.value}\n      </div>\n    );\n  }\n}\n\nexport default Pad;","import React, { Component } from 'react';\nimport './App.css';\n\nimport kick1 from \"./Sounds/kick-1.mp3\";\nimport kick2 from \"./Sounds/kick-2.mp3\";\nimport snare1 from \"./Sounds/snare-1.mp3\";\nimport snare2 from \"./Sounds/snare-2.mp3\";\nimport ch from \"./Sounds/hihat-close.mp3\";\nimport oh from \"./Sounds/hihat-open.mp3\";\nimport hit1 from \"./Sounds/hit-1.mp3\";\nimport hit2 from \"./Sounds/hit-2.mp3\";\nimport trumpet from \"./Sounds/trumpet.mp3\";\n\nimport Pad from './Components/Pad';\nimport Display from './Components/Display';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playedSound: '-',\n      padsKit: [\n        {\n          padKey: 'Q',\n          padName: 'Hit A',\n          padSound: hit1\n        },\n        {\n          padKey: 'W',\n          padName: 'Hit B',\n          padSound: hit2\n        },\n        {\n          padKey: 'E',\n          padName: 'Trumpet',\n          padSound: trumpet\n        },\n        {\n          padKey: 'A',\n          padName: 'Snare A',\n          padSound: snare1\n        },\n        {\n          padKey: 'S',\n          padName: 'Snare B',\n          padSound: snare2\n        },\n        {\n          padKey: 'D',\n          padName: 'Open HiHat',\n          padSound: oh\n        },\n        {\n          padKey: 'Z',\n          padName: 'Kick A',\n          padSound: kick1\n        },\n        {\n          padKey: 'X',\n          padName: 'Kick B',\n          padSound: kick2\n        },\n        {\n          padKey: 'C',\n          padName: 'Close HiHat',\n          padSound: ch\n        },\n      ]\n    };\n\n    this.playKey = this.playKey.bind(this);\n    this.pressKey = this.pressKey.bind(this);\n    this.updateDisplay = this.updateDisplay.bind(this);\n  }\n\n  componentDidMount() {\n    document.addEventListener('keydown', this.pressKey);\n  }\n\n  pressKey(e) {\n    let validKeys = this.state.padsKit.map(key => key.padKey).concat(this.state.padsKit.map(key => key.padKey.toLowerCase()));\n        \n    if(validKeys.includes(e.key)) {\n      this.playKey(e.key.toUpperCase());\n    }\n  }\n\n  playKey(padKey) {\n    let button = document.getElementById('drum-pad-' + padKey);\n    let audio = document.getElementById(padKey);\n    audio.currentTime = 0;\n    audio.play();\n\n    this.updateDisplay(padKey);\n    button.classList.add(\"active\");\n    setTimeout(() => { \n      button.classList.remove(\"active\");\n    }, 100);\n\n  }\n\n  updateDisplay(padKey) {\n    let pressedKey = this.state.padsKit.filter(key => key.padKey === padKey);\n\n    this.setState({\n      playedSound: pressedKey[0].padName\n    });\n  }\n\n  render() {\n    let padsKit = this.state.padsKit.map((key, i) => {\n      return (\n        <Pad padKey={key.padKey} padSound={key.padSound} playKey={() => this.playKey(key.padKey)} key={i}  />\n      )\n    });\n\n    return (\n      <main id=\"drum-machine\" className=\"mpc\">\n        <h1><span>React</span> MPC-2020 JS</h1>\n        <Display value={this.state.playedSound} />\n\n        <section className=\"pads\">\n        { padsKit }\n        </section>\n        <small><a href=\"https://en.wikipedia.org/wiki/Akai_MPC\" target=\"_blank\">+ info about AKAI MPC</a></small>\n      </main>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}